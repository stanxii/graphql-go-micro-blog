// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/article/article.proto

package go_micro_srv_article

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ArticleSrv service

type ArticleSrvService interface {
	Total(ctx context.Context, in *TotalRequest, opts ...client.CallOption) (*TotalResponse, error)
	Articles(ctx context.Context, in *ArticlesRequest, opts ...client.CallOption) (*ArticlesResponse, error)
	Article(ctx context.Context, in *ArticleRequest, opts ...client.CallOption) (*ArticleResponse, error)
	CreateArticle(ctx context.Context, in *CreateArticleRequest, opts ...client.CallOption) (*ArticleResponse, error)
	Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (ArticleSrv_StreamService, error)
	PingPong(ctx context.Context, opts ...client.CallOption) (ArticleSrv_PingPongService, error)
}

type articleSrvService struct {
	c    client.Client
	name string
}

func NewArticleSrvService(name string, c client.Client) ArticleSrvService {
	return &articleSrvService{
		c:    c,
		name: name,
	}
}

func (c *articleSrvService) Total(ctx context.Context, in *TotalRequest, opts ...client.CallOption) (*TotalResponse, error) {
	req := c.c.NewRequest(c.name, "ArticleSrv.Total", in)
	out := new(TotalResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleSrvService) Articles(ctx context.Context, in *ArticlesRequest, opts ...client.CallOption) (*ArticlesResponse, error) {
	req := c.c.NewRequest(c.name, "ArticleSrv.Articles", in)
	out := new(ArticlesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleSrvService) Article(ctx context.Context, in *ArticleRequest, opts ...client.CallOption) (*ArticleResponse, error) {
	req := c.c.NewRequest(c.name, "ArticleSrv.Article", in)
	out := new(ArticleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleSrvService) CreateArticle(ctx context.Context, in *CreateArticleRequest, opts ...client.CallOption) (*ArticleResponse, error) {
	req := c.c.NewRequest(c.name, "ArticleSrv.CreateArticle", in)
	out := new(ArticleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleSrvService) Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (ArticleSrv_StreamService, error) {
	req := c.c.NewRequest(c.name, "ArticleSrv.Stream", &StreamingRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &articleSrvServiceStream{stream}, nil
}

type ArticleSrv_StreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamingResponse, error)
}

type articleSrvServiceStream struct {
	stream client.Stream
}

func (x *articleSrvServiceStream) Close() error {
	return x.stream.Close()
}

func (x *articleSrvServiceStream) Context() context.Context {
	return x.stream.Context()
}

func (x *articleSrvServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *articleSrvServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *articleSrvServiceStream) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *articleSrvService) PingPong(ctx context.Context, opts ...client.CallOption) (ArticleSrv_PingPongService, error) {
	req := c.c.NewRequest(c.name, "ArticleSrv.PingPong", &Ping{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &articleSrvServicePingPong{stream}, nil
}

type ArticleSrv_PingPongService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Ping) error
	Recv() (*Pong, error)
}

type articleSrvServicePingPong struct {
	stream client.Stream
}

func (x *articleSrvServicePingPong) Close() error {
	return x.stream.Close()
}

func (x *articleSrvServicePingPong) Context() context.Context {
	return x.stream.Context()
}

func (x *articleSrvServicePingPong) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *articleSrvServicePingPong) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *articleSrvServicePingPong) Send(m *Ping) error {
	return x.stream.Send(m)
}

func (x *articleSrvServicePingPong) Recv() (*Pong, error) {
	m := new(Pong)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ArticleSrv service

type ArticleSrvHandler interface {
	Total(context.Context, *TotalRequest, *TotalResponse) error
	Articles(context.Context, *ArticlesRequest, *ArticlesResponse) error
	Article(context.Context, *ArticleRequest, *ArticleResponse) error
	CreateArticle(context.Context, *CreateArticleRequest, *ArticleResponse) error
	Stream(context.Context, *StreamingRequest, ArticleSrv_StreamStream) error
	PingPong(context.Context, ArticleSrv_PingPongStream) error
}

func RegisterArticleSrvHandler(s server.Server, hdlr ArticleSrvHandler, opts ...server.HandlerOption) error {
	type articleSrv interface {
		Total(ctx context.Context, in *TotalRequest, out *TotalResponse) error
		Articles(ctx context.Context, in *ArticlesRequest, out *ArticlesResponse) error
		Article(ctx context.Context, in *ArticleRequest, out *ArticleResponse) error
		CreateArticle(ctx context.Context, in *CreateArticleRequest, out *ArticleResponse) error
		Stream(ctx context.Context, stream server.Stream) error
		PingPong(ctx context.Context, stream server.Stream) error
	}
	type ArticleSrv struct {
		articleSrv
	}
	h := &articleSrvHandler{hdlr}
	return s.Handle(s.NewHandler(&ArticleSrv{h}, opts...))
}

type articleSrvHandler struct {
	ArticleSrvHandler
}

func (h *articleSrvHandler) Total(ctx context.Context, in *TotalRequest, out *TotalResponse) error {
	return h.ArticleSrvHandler.Total(ctx, in, out)
}

func (h *articleSrvHandler) Articles(ctx context.Context, in *ArticlesRequest, out *ArticlesResponse) error {
	return h.ArticleSrvHandler.Articles(ctx, in, out)
}

func (h *articleSrvHandler) Article(ctx context.Context, in *ArticleRequest, out *ArticleResponse) error {
	return h.ArticleSrvHandler.Article(ctx, in, out)
}

func (h *articleSrvHandler) CreateArticle(ctx context.Context, in *CreateArticleRequest, out *ArticleResponse) error {
	return h.ArticleSrvHandler.CreateArticle(ctx, in, out)
}

func (h *articleSrvHandler) Stream(ctx context.Context, stream server.Stream) error {
	m := new(StreamingRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ArticleSrvHandler.Stream(ctx, m, &articleSrvStreamStream{stream})
}

type ArticleSrv_StreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamingResponse) error
}

type articleSrvStreamStream struct {
	stream server.Stream
}

func (x *articleSrvStreamStream) Close() error {
	return x.stream.Close()
}

func (x *articleSrvStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *articleSrvStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *articleSrvStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *articleSrvStreamStream) Send(m *StreamingResponse) error {
	return x.stream.Send(m)
}

func (h *articleSrvHandler) PingPong(ctx context.Context, stream server.Stream) error {
	return h.ArticleSrvHandler.PingPong(ctx, &articleSrvPingPongStream{stream})
}

type ArticleSrv_PingPongStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Pong) error
	Recv() (*Ping, error)
}

type articleSrvPingPongStream struct {
	stream server.Stream
}

func (x *articleSrvPingPongStream) Close() error {
	return x.stream.Close()
}

func (x *articleSrvPingPongStream) Context() context.Context {
	return x.stream.Context()
}

func (x *articleSrvPingPongStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *articleSrvPingPongStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *articleSrvPingPongStream) Send(m *Pong) error {
	return x.stream.Send(m)
}

func (x *articleSrvPingPongStream) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
